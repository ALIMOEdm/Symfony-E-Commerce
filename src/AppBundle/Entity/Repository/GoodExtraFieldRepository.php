<?php

namespace AppBundle\Entity\Repository;

/**
 * GoodExtraFieldRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GoodExtraFieldRepository extends \Doctrine\ORM\EntityRepository
{
    public function getExtraFiledValBayGoodIdAndFieldId($good_id, $extra_filed_id)
    {
        $res = $this->createQueryBuilder('ef')
            ->where('ef.good=:good_id AND ef.extra_field=:extra_filed_id')
            ->setParameter(':good_id', $good_id)
            ->setParameter(':extra_filed_id', $extra_filed_id)
            ->getQuery()->execute();

        if(isset($res[0])){
            return $res[0];
        }
        return null;
    }
    
    public function getExtraFieldsValuesByCategoryId($category_id){
        $query = "  SELECT `gef`.`extra_field_id`, IF(`gef`.`type` = 'number',`gef`.`value_number`,`gef`.`value_text`) `final_value`, `ef`.`title`, `ef`.`type`, `ef`.`show_it` 
					FROM `goods` as `g`
					LEFT JOIN `good_extra_field` as `gef` on `gef`.`good_id` = `g`.`id` 
					LEFT JOIN `category_fields` as `cf` on `gef`.`extra_field_id` = `cf`.`extra_fields_id` 
					LEFT JOIN `extra_fields` as `ef` on `ef`.`id` = `cf`.`extra_fields_id`
					WHERE `ef`.`show_it` = 1 AND `g`.`category_id` = :category_id 
					GROUP BY `gef`.`extra_field_id`, `final_value`
					HAVING `final_value` IS NOT NULL 
					ORDER BY `gef`.`extra_field_id` DESC;";
        // $query = "  SELECT `gef`.`extra_field_id`, IF(`gef`.`type` = 'number',`gef`.`value_number`,`gef`.`value_text`) `final_value`, `ef`.`title`, `ef`.`type`, `ef`.`show_it` 
        //             FROM `category_fields` as `cf`
        //             LEFT JOIN `good_extra_field` as `gef` 
        //                 on `gef`.`extra_field_id` = `cf`.`extra_fields_id` 
        //                 AND `cf`.`category_id` IN (
        //                 	SELECT `CAT`.`id`
    				// 		FROM `category` AS `CAT`
    				// 		LEFT JOIN category_treepath `CT` ON (`CAT`.`id` = `CT`.`ancestor`)
    				// 		WHERE `CT`.`descendant` = :category_id 
        //                 )
        //             LEFT JOIN `extra_fields` as `ef` on `ef`.`id` = `cf`.`extra_fields_id`
        //             WHERE `ef`.`show_it` = 1 
        //             GROUP BY `gef`.`extra_field_id`, `final_value`
        //             HAVING `final_value` IS NOT NULL 
        //             ORDER BY `gef`.`extra_field_id` DESC";
        $params = array(
            'category_id' => $category_id,
        );
            return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
    }
    
    public function getExtraFiledsByGoodId($good_id){
        $query = "SELECT GEF.`value`, GEF.`value_text`, GEF.`value_number`, GEF.`type`, "
                . " EF.`xml_title` "
                . " FROM good_extra_field AS GEF "
                . " LEFT JOIN extra_fields AS EF ON EF.`id`=GEF.`extra_field_id` "
                . " WHERE GEF.`good_id`=:good_id";
        $params = array(
            'good_id' => $good_id,
        );
        return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
    }

    
    public function getGoodsForCatalog($category_id, $search, $brand, $page = 1, $per_page = 10, $extra_fields = array(), $order = array()){
        $params = array(
            'category_id' => $category_id,
        );
        
        $query = $this->makeQueryForCatalog($search, $brand, $extra_fields, $order, $params);
        $limit = "";
        if (empty($search)){
            $per_page = (int) $per_page;
            $page = (int) $page;
            $offset = $per_page * $page - $per_page;
            $limit = " LIMIT " . $per_page . " OFFSET " . $offset;
        }
        $query .= $limit;

        $goods = $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
        $goods_id = array();
        foreach ($goods as $value) {
            $goods_id[] = $value["id"];
        }
        return $this->getEntityManager()->getRepository('AppBundle:Goods')->findBy(array('id' => $goods_id), array($order["order_field"] => $order["sc"]));
    }


    public function getQtyGoodsForCatalog($category_id, $search, $brand, $extra_fields = array()){
        $params = array(
            'category_id' => $category_id,
        );
        $sub_query = $this->makeQueryForCatalog($search, $brand, $extra_fields, array(), $params);
        $query = "  SELECT COUNT(`T`.`qty`) as `qty` 
                    FROM( " . $sub_query . " ) as `T` ";
                    
        return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetch();
    }

    public function makeQueryForCatalog($search, $brand, $extra_fields, $order, &$params){
        $order_by = "";
        $group_by = "";
        $query = "  SELECT  `g`.`id`, COUNT(`g`.`id`) as `qty`
                    FROM `goods` as `g`
                    LEFT JOIN `good_extra_field` as `ef` on `ef`.`good_id` = `g`.`id` ";
        if (!empty($search)){
            $where = " WHERE `g`.`id` = :good_id ";
            $params["good_id"] = $search;
        } else {
            $where = " WHERE `g`.`category_id` = :category_id " . $this->makeWhereForExtraFields($extra_fields, $params);
            if (is_array($brand) && count($brand)){
                $where .= " AND ( FALSE "; 
                foreach ($brand as $key => $value) {
                    $where .= " OR ( `g`.`brand` = :brand" . $key . " ) ";
                    $params["brand" . $key] = $value;
                }
                $where .= " ) "; 
            }
            if (!empty($order)) {
                $order_by = " ORDER BY :order_field :sc ";
                $params["order_field"] = $order["order_field"];
                $params["sc"] = $order["sc"];
            }

            $group_by = count($extra_fields) ? " GROUP BY `g`.`id` HAVING `qty` = " . count($extra_fields) : " GROUP BY `g`.`id` ";
        }
        $query .= $where . $group_by . $order_by;
        return $query;
    }

    protected function makeWhereForExtraFields($extra_fields = array(), &$params){
        $where = "";
        if (count($extra_fields)) {
            $where .= " AND ( FALSE ";
        } 
        foreach ($extra_fields as $ef) {
            if (!isset($ef["id"]) || !isset($ef["type"]) || !is_array($ef["val"])) continue;
            $ef_id = (int) $ef["id"];
            if ($ef["type"] == "number") {
                $where .= " OR ( FALSE "; 
                foreach ($ef["val"] as $value) {
                    $ef_val = (float) $value;
                    $where .= " OR (`ef`.`extra_field_id` = " . $ef_id . " AND value_number = " . $ef_val . " ) "; 
                }
                $where .= " ) "; 
            }else{
                $where .= " OR ( FALSE "; 
                foreach ($ef["val"] as $key => $value) {
                    $where .= " OR (`ef`.`extra_field_id` = " . $ef_id . " AND value_text = :val_" . $ef_id . $key ." ) "; 
                    $params["val_" . $ef_id . $key] = $value;
                }
                $where .= " ) "; 
            }
        }
        if (count($extra_fields)) {
            $where .= " ) ";
        } 
        return $where;
    }  
}

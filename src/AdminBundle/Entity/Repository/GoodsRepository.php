<?php

namespace AdminBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * GoodsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GoodsRepository extends EntityRepository
{

    public function getGoodsByLike($string){
        $query = "	SELECT `id`, `short_title`, `title`
					FROM `goods`
					WHERE `short_title` LIKE CONCAT('%',:string,'%') OR `title` LIKE CONCAT('%',:string,'%') 
					LIMIT 5 ";
		$params = array(
		    'string' => $string,
		);
		return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
	}
	
    public function getGoodSet($limit, $offset){
        $query = "SELECT G.`id`, G.`short_title`, G.`title`, G.`xml_title` as good_xml_title, G.`description`, G.`brand`, "
                . " G.`article`, G.`rating`, C.`xml_title` "
                . " FROM goods as G "
                . " LEFT JOIN category AS C ON C.`id`=G.`category_id`" ;
        if($limit){
            $query .=  " LIMIT ".$limit;
        }
        if($offset){
            $query .=  " OFFSET ".$offset;
        }
        $params = array();
        return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
    }
    
    public function getGoodList(){
        $q = $this->createQueryBuilder('q')
                ->orderBy('q.title', 'ASC')
        ->getQuery();
        return $q;
    }


    public function updateGoodsCategory($id){
        $query = "UPDATE `goods` SET `category_id` = NULL WHERE `category_id` = :id";
        $params = array(
            'id' => $id,
        );
        return $this->getEntityManager()->getConnection()->executeQuery($query, $params);
    }
}

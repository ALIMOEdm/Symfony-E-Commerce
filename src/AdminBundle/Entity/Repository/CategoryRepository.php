<?php

namespace AdminBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{

	public function deleteCategoriesByDescendant($id){
		$query = "DELETE FROM category_treepath WHERE descendant = :id";
		$params = array(
		    'id' => $id,
		);
		return $this->getEntityManager()->getConnection()->executeQuery($query, $params);
    }
    
	public function deleteExtraFieldsLinks($id){
		$query = "DELETE FROM `category_fields` WHERE `category_id` =  :id;";
		$params = array(
		    'id' => $id,
		);
		return $this->getEntityManager()->getConnection()->executeQuery($query, $params);
    }

	public function addCategoryTreePaths($id, $parent_category){
		$query = "  INSERT INTO category_treepath (ancestor, descendant, level)
		            SELECT ancestor, :id, level+1
		            FROM category_treepath
		            WHERE descendant = :parent_category 
		            UNION ALL
		            SELECT :id, :id, 0";
		$params = array(
		    'id' => $id,
		    'parent_category' => $parent_category,
		);
		return $this->getEntityManager()->getConnection()->executeQuery($query, $params);
    }

/*    public function getParentsCategory($em, $category_id){
        $query = "SELECT CAT.*
             FROM category AS CAT
             JOIN category_treepath CT ON (CAT.id = CT.ancestor)
             WHERE CT.descendant = ?
             ORDER BY CT.level";

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('\AdminBundle\Entity\Category', 'ca');
        $rsm->addFieldResult('ca', 'id', 'id');

        $res = $em->createNativeQuery($query, $rsm)
            ->setParameter(1, $category_id);
        return $res->getResult();
    }
*/

    public function getParentsCategory($category_id){
        $query = "	SELECT `CAT`.`id`, `CAT`.`title`
					FROM category AS CAT
					LEFT JOIN category_treepath CT ON (CAT.id = CT.ancestor)
					WHERE CT.descendant = :id
					ORDER BY CT.level DESC";
		$params = array(
		    'id' => $category_id,
		);
		return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
    }

    public function getFirstLineChildsCategory($category_id){
        $query = "	SELECT `CAT`.`id`, `CAT`.`title`, `CAT`.`path` 
         			FROM category AS CAT
					WHERE CAT.parent_category = :id";
		$params = array(
		    'id' => $category_id,
		);
		return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
    }

    public function getBrandsForCategory($category_id){
        $query = "	SELECT `goods`.`brand`
					FROM `goods`
					WHERE `category_id` = :category_id
					GROUP BY `goods`.`brand` ";
		$params = array(
		    'category_id' => $category_id,
		);
		return $this->getEntityManager()->getConnection()->executeQuery($query, $params)->fetchAll();
    }
}
